from django.contrib import messages
from django.contrib.auth import logout, login, authenticate
from django.contrib.auth.decorators import login_required, permission_required
from django.contrib.auth.models import User, Group
from django.contrib.sites.models import Site
from django.core.cache import cache
from django.core.exceptions import ObjectDoesNotExist
from django.shortcuts import render, redirect, get_object_or_404
from django.utils import timezone

from accounts import logger
from accounts.forms import LoginForm, SigninForm, UpdateForm, SettingsForm, ForgotPasswordForm, ChangePasswordForm
from accounts.models import Token, Settings
from eventManager.settings import LOGIN_REDIRECT_URL, SITE_SCHEMA, MODERATOR_MAIL
from accounts.tasks import send_email

FORM_ERROR_TEXT = '–§–æ—Ä–º–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏!'


def index(request):
    match request.method:
        case 'GET':
            cache.set('next', request.GET.get('next', None))
            form = LoginForm()

        case 'POST':
            form = LoginForm(request.POST)
            if form.is_valid():
                username = request.POST['username']
                password = request.POST['password']
                user = authenticate(request, username=username, password=password)
                if user is not None and user.is_active:
                    login(request, user)
                    if not request.user.is_anonymous:
                        messages.add_message(
                            request,
                            messages.SUCCESS,
                            f'–ü—Ä–∏–≤–µ—Ç, {request.user.first_name} {request.user.last_name}!'
                        )
                        token, create = Token.objects.get_or_create(owner=user)
                        if not token.email_verified:
                            messages.warning(
                                request, '–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥—ë–Ω. –§—É–Ω–∫—Ü–∏–æ–Ω–∞–ª –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω. '
                                         '–ï—Å–ª–∏ –≤—ã –Ω–µ –ø–æ–ª—É—á–∏–ª–∏ –ø–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –º–æ–∂–µ—Ç–µ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –µ–≥–æ –ø–æ–≤—Ç–æ—Ä–Ω–æ –≤ '
                                         '–ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–∏ "–ü—Ä–æ—Ñ–∏–ª—å" –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.')
                    if cache.get("next"):
                        return redirect(cache.get("next"))
                    else:
                        return redirect(LOGIN_REDIRECT_URL)
                elif user is not None and not user.is_active:
                    if user.is_staff:
                        messages.add_message(
                            request, messages.INFO,
                            f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω. –í—ã –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–æ–ª—å "–°–ø–µ—Ü–∏–∞–ª–∏—Å—Ç", –ø–æ—ç—Ç–æ–º—É –ø–∏—Å—å–º–æ –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è —É—á–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ –±—ã–ª–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É. –ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–ª–∏ –≤–æ–ø—Ä–æ—Å—ã, –Ω–∞–ø–∏—à–∏—Ç–µ –ø–∏—Å—å–º–æ –Ω–∞ –∞–¥—Ä–µ—Å: {MODERATOR_MAIL}')
                    else:
                        messages.add_message(
                            request, messages.INFO,
                            '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ—Ç–∫–ª—é—á–µ–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ –∏–∑ –ø–∏—Å—å–º–∞.')
                else:
                    form.add_error('password', '–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –≤–≤–æ–¥–∞ –ø–∞—Ä–æ–ª—è')
                    messages.add_message(request, messages.ERROR, FORM_ERROR_TEXT)
            else:
                messages.add_message(request, messages.ERROR, FORM_ERROR_TEXT)

    return render(request, 'accounts/index.html', {'form': form})


@login_required()
def change_password_view(request):
    match request.method:
        case 'GET':
            form = ChangePasswordForm()
            return render(request, 'accounts/change_password.html', {'form': form})

        case 'POST':
            form = ChangePasswordForm(request.POST, request=request)
            user = request.user
            if form.is_valid():
                user.set_password(form.cleaned_data['password'])
                user.save()
                messages.info(request, '–ü–∞—Ä–æ–ª—å –∏–∑–º–µ–Ω—ë–Ω')
                return render(request, 'accounts/profile.html')
            else:
                messages.error(request, '–§–æ—Ä–º–∞ –Ω–µ –ø—Ä–æ—à–ª–∞ –ø—Ä–æ–≤–µ—Ä–∫—É')
                return render(request, 'accounts/change_password.html', {'form': form})


def forgot_password_view(request):
    match request.method:
        case 'GET':
            form = ForgotPasswordForm()
            return render(request, 'accounts/forgot_password.html', {'form': form})
        case 'POST':
            form = ForgotPasswordForm(request.POST)
            if form.is_valid():
                user = User.objects.get(username__iexact=form.cleaned_data['username'])
                password = User.objects.make_random_password()
                user.set_password(password)
                user.save()
                if user.token.first().email_verified:
                    msg = {
                        'subject': f'üîí –í–∞—à –ø–∞—Ä–æ–ª—å –¥–ª—è –≤—Ö–æ–¥–∞',
                        'body': f'{user.username} {password}',
                        'recipients': [user.email],
                        'template': 'messages/forgot_password.html',
                        'url': f"{SITE_SCHEMA}://{Site.objects.get_current().domain}"
                    }
                    send_email.delay(**msg)
                    messages.info(request, '–ü–∏—Å—å–º–æ —Å –ø–∞—Ä–æ–ª–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
                    return redirect('accounts:index')
                else:
                    messages.warning(request, f'–í–∞—à –∞–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç—ã –Ω–µ –±—ã–ª –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω!<br><hr>'
                                              f'–û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É: <a href="mailto:{MODERATOR_MAIL}">{MODERATOR_MAIL}</a>', extra_tags='safe')
                    return redirect('accounts:index')
            else:
                return render(request, 'accounts/forgot_password.html', {'form': form})


@login_required
def settings_view(request):
    match request.method:
        case 'GET':
            user_settings, created = Settings.objects.get_or_create(user=request.user)
            form = SettingsForm(instance=user_settings)
            return render(request, 'accounts/settings.html', {'form': form})
        case 'POST':
            form = SettingsForm(data=request.POST)
            if form.is_valid():
                user_settings = Settings.objects.get(user=request.user)
                [setattr(user_settings, field, form.cleaned_data[field]) for field in SettingsForm._meta.fields]
                user_settings.save()
                messages.success(request, '–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã')
                return redirect('accounts:settings')
            else:
                return render(request, 'accounts/settings.html', {'form': form})


@login_required
def logout_view(request):
    logout(request)
    return redirect('accounts:index')


def signin_view(request):
    match request.method:
        case 'POST':
            form = SigninForm(request.POST)
            if form.is_valid():
                user = User.objects.create_user(
                    username=form.cleaned_data.get('username'),
                    email=form.cleaned_data.get('email'),
                    first_name=form.cleaned_data.get('first_name'),
                    last_name=form.cleaned_data.get('last_name'),
                    password=form.cleaned_data.get('password'),
                )

                if form.cleaned_data.get('group') == 'staff':
                    user.is_staff = True

                token = Token.objects.create(owner=user)
                settings, _ = Settings.objects.get_or_create(user=user)
                group, _ = Group.objects.get_or_create(name=form.cleaned_data.get('group'))
                if _:
                    logger.debug(f'–°–æ–∑–¥–∞–Ω–∞ –Ω–æ–≤–∞—è –≥—Ä—É–ø–ø–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {group}')
                user.groups.add(group)
                user.is_active = False
                user.save()

                if group.name == 'user':
                    messages.success(request, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ—á—Ç—É.')
                    send_email.delay(
                        subject=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                        body=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–µ—Ä–µ–π—Ç–∏ [–ø–æ —Å—Å—ã–ª–∫–µ](url).',
                        recipients=[user.email],
                        from_email='ru89050995432@yandex.ru',
                        template='messages/email_confirm.html',
                        check_email_verified=False,
                        confirm_url=token.get_absolute_url()
                    )
                    token.sendmail_date = timezone.now()
                    token.save()
                elif group.name == 'staff':
                    messages.success(
                        request,
                        f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ—Ö—Ä–∞–Ω–µ–Ω. –ü–∏—Å—å–º–æ —Å –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ–º, –±—É–¥–µ—Ç –≤—ã—Å–ª–∞–Ω–æ –ø–æ—Å–ª–µ –º–æ–¥–µ—Ä–∞—Ü–∏–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.'
                    )
                    send_email.delay(
                        subject=f'ü´Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                        body=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.email} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–µ—Ä–µ–π—Ç–∏ [–ø–æ —Å—Å—ã–ª–∫–µ](url).',
                        recipients=[MODERATOR_MAIL],
                        template='messages/email_confirm_service.html',
                        check_email_verified=False,
                        confirm_url=token.get_absolute_url()
                    )
                    token.sendmail_date = timezone.now()
                    user.save()
                return redirect('accounts:index')

            else:
                messages.add_message(request, messages.ERROR, FORM_ERROR_TEXT)
        case 'GET':
            form = SigninForm()
    return render(request, 'accounts/signin.html', {'form': form})


@login_required
def profile_view(request):
    return render(request, 'accounts/profile.html')


@login_required
def delete_view(request):
    user = request.user
    logout(request)
    user.delete()
    messages.add_message(request, messages.WARNING, f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {request.user.username} —É–¥–∞–ª—ë–Ω.')
    return redirect('accounts:index')


@login_required
def update_view(request):
    match request.method:
        case 'POST':
            form = UpdateForm(data=request.POST, instance=request.user)
            if form.is_valid():
                form.save()
                messages.success(request, '–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω')
                return redirect('accounts:profile')
            else:
                messages.error(request, '–ß—Ç–æ-—Ç–æ –ø–æ—à–ª–æ –Ω–µ —Ç–∞–∫')
                return render(request, 'accounts/update.html', {'form': form})
        case 'GET':
            form = UpdateForm(instance=request.user)
            return render(request, 'accounts/update.html', {'form': form})


def confirm_view(request, token):
    match request.method:
        case 'GET':
            try:
                token = Token.objects.get(uid=token)
                token.email_verified = True
                token.verified_date = timezone.now()
                token.save()
                user = token.owner
                user.is_active = True
                user.save()
                messages.success(request, '–ü–æ—á—Ç–∞ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∞')
                send_email.delay(
                    subject=f'–ê–¥—Ä–µ—Å —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–æ–π –ø–æ—á—Ç–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω',
                    body=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.username} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω.',
                    recipients=[user.email],
                    from_email='ru89050995432@yandex.ru',
                    template='messages/email_verified.html',
                    check_email_verified=True,
                )
            except ObjectDoesNotExist:
                messages.error(request, '–¢–æ–∫–µ–Ω –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç')
            finally:
                return redirect(LOGIN_REDIRECT_URL)


@login_required
@permission_required("accounts.view_settings", raise_exception=True)
def userprofile_view(request, username):
    match request.method:
        case 'GET':
            user = get_object_or_404(User, username=username)
            return render(request, 'accounts/user_profile.html', {'user':  user})


@login_required
def email_verified_view(request):
    match request.method:
        case 'GET':
            user = request.user
            token = user.token.first()
            send_email.delay(
                subject=f'ü´Ç –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω',
                body=f'–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user} –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω. –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞–∂–∞—Ç—å –ø–µ—Ä–µ–π—Ç–∏ [–ø–æ —Å—Å—ã–ª–∫–µ](url).',
                recipients=[user.email],
                template='messages/email_confirm.html',
                check_email_verified=False,
                confirm_url=token.get_absolute_url()
            )
            token.sendmail_date = timezone.now()
            token.save()
            messages.info(request, '–ü–∏—Å—å–º–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ')
            return redirect('accounts:profile')
